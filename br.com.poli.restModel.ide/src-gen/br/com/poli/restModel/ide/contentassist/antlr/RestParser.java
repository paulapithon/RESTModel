/*
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.ide.contentassist.antlr;

import br.com.poli.restModel.ide.contentassist.antlr.internal.InternalRestParser;
import br.com.poli.restModel.services.RestGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RestParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RestGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RestGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBodyAccess().getAlternatives(), "rule__Body__Alternatives");
			builder.put(grammarAccess.getAtribAccess().getTipoAlternatives_2_0(), "rule__Atrib__TipoAlternatives_2_0");
			builder.put(grammarAccess.getGlobAtribAccess().getTipoAlternatives_2_0(), "rule__GlobAtrib__TipoAlternatives_2_0");
			builder.put(grammarAccess.getValuesAccess().getAlternatives(), "rule__Values__Alternatives");
			builder.put(grammarAccess.getParmAccess().getTipo_atriAlternatives_2_0(), "rule__Parm__Tipo_atriAlternatives_2_0");
			builder.put(grammarAccess.getTYPE_NAMEAccess().getAlternatives_1_1_0(), "rule__TYPE_NAME__Alternatives_1_1_0");
			builder.put(grammarAccess.getTYPE_NAMEAccess().getAlternatives_1_2(), "rule__TYPE_NAME__Alternatives_1_2");
			builder.put(grammarAccess.getVALID_TYPESAccess().getAlternatives(), "rule__VALID_TYPES__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getElemAccess().getGroup(), "rule__Elem__Group__0");
			builder.put(grammarAccess.getElemAccess().getGroup_2(), "rule__Elem__Group_2__0");
			builder.put(grammarAccess.getAtribAccess().getGroup(), "rule__Atrib__Group__0");
			builder.put(grammarAccess.getAtribAccess().getGroup_3(), "rule__Atrib__Group_3__0");
			builder.put(grammarAccess.getGlobAtribAccess().getGroup(), "rule__GlobAtrib__Group__0");
			builder.put(grammarAccess.getGlobAtribAccess().getGroup_3(), "rule__GlobAtrib__Group_3__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_0(), "rule__Values__Group_0__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_1(), "rule__Values__Group_1__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_2(), "rule__Values__Group_2__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_3(), "rule__Values__Group_3__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_4(), "rule__Values__Group_4__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_5(), "rule__Values__Group_5__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_5_3(), "rule__Values__Group_5_3__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_5_3_0(), "rule__Values__Group_5_3_0__0");
			builder.put(grammarAccess.getParmAccess().getGroup(), "rule__Parm__Group__0");
			builder.put(grammarAccess.getTYPE_NAMEAccess().getGroup(), "rule__TYPE_NAME__Group__0");
			builder.put(grammarAccess.getTYPE_NAMEAccess().getGroup_1(), "rule__TYPE_NAME__Group_1__0");
			builder.put(grammarAccess.getTYPE_NAMEAccess().getGroup_1_1(), "rule__TYPE_NAME__Group_1_1__0");
			builder.put(grammarAccess.getPackageNameAccess().getGroup(), "rule__PackageName__Group__0");
			builder.put(grammarAccess.getPackageNameAccess().getGroup_1(), "rule__PackageName__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getBodyAssignment_3(), "rule__Model__BodyAssignment_3");
			builder.put(grammarAccess.getBodyAccess().getElemAssignment_0(), "rule__Body__ElemAssignment_0");
			builder.put(grammarAccess.getBodyAccess().getGlobAtribAssignment_1(), "rule__Body__GlobAtribAssignment_1");
			builder.put(grammarAccess.getElemAccess().getClassNameAssignment_0(), "rule__Elem__ClassNameAssignment_0");
			builder.put(grammarAccess.getElemAccess().getPackageAssignment_2_1(), "rule__Elem__PackageAssignment_2_1");
			builder.put(grammarAccess.getElemAccess().getAtribAssignment_3(), "rule__Elem__AtribAssignment_3");
			builder.put(grammarAccess.getAtribAccess().getAtribNameAssignment_0(), "rule__Atrib__AtribNameAssignment_0");
			builder.put(grammarAccess.getAtribAccess().getTipoAssignment_2(), "rule__Atrib__TipoAssignment_2");
			builder.put(grammarAccess.getAtribAccess().getValueAssignment_3_1(), "rule__Atrib__ValueAssignment_3_1");
			builder.put(grammarAccess.getGlobAtribAccess().getAtribNameAssignment_0(), "rule__GlobAtrib__AtribNameAssignment_0");
			builder.put(grammarAccess.getGlobAtribAccess().getTipoAssignment_2(), "rule__GlobAtrib__TipoAssignment_2");
			builder.put(grammarAccess.getGlobAtribAccess().getValueAssignment_3_1(), "rule__GlobAtrib__ValueAssignment_3_1");
			builder.put(grammarAccess.getValuesAccess().getIdAssignment_0_1(), "rule__Values__IdAssignment_0_1");
			builder.put(grammarAccess.getValuesAccess().getIdBAssignment_1_1(), "rule__Values__IdBAssignment_1_1");
			builder.put(grammarAccess.getValuesAccess().getIdFAssignment_2_1(), "rule__Values__IdFAssignment_2_1");
			builder.put(grammarAccess.getValuesAccess().getIdSAssignment_3_1(), "rule__Values__IdSAssignment_3_1");
			builder.put(grammarAccess.getValuesAccess().getIdCAssignment_4_1(), "rule__Values__IdCAssignment_4_1");
			builder.put(grammarAccess.getValuesAccess().getIdTAssignment_5_1(), "rule__Values__IdTAssignment_5_1");
			builder.put(grammarAccess.getValuesAccess().getParAssignment_5_3_0_0(), "rule__Values__ParAssignment_5_3_0_0");
			builder.put(grammarAccess.getValuesAccess().getParAssignment_5_3_1(), "rule__Values__ParAssignment_5_3_1");
			builder.put(grammarAccess.getParmAccess().getAtribNameAssignment_0(), "rule__Parm__AtribNameAssignment_0");
			builder.put(grammarAccess.getParmAccess().getTipo_atriAssignment_2(), "rule__Parm__Tipo_atriAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RestGrammarAccess grammarAccess;

	@Override
	protected InternalRestParser createParser() {
		InternalRestParser result = new InternalRestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
