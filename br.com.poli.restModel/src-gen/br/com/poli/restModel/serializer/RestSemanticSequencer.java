/*
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.serializer;

import br.com.poli.restModel.rest.Atrib;
import br.com.poli.restModel.rest.Body;
import br.com.poli.restModel.rest.Elem;
import br.com.poli.restModel.rest.Field;
import br.com.poli.restModel.rest.Method;
import br.com.poli.restModel.rest.Model;
import br.com.poli.restModel.rest.Parm;
import br.com.poli.restModel.rest.RestPackage;
import br.com.poli.restModel.services.RestGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RestSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RestGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RestPackage.ATRIB:
				sequence_Atrib(context, (Atrib) semanticObject); 
				return; 
			case RestPackage.BODY:
				sequence_Body(context, (Body) semanticObject); 
				return; 
			case RestPackage.ELEM:
				sequence_Elem(context, (Elem) semanticObject); 
				return; 
			case RestPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case RestPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case RestPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RestPackage.PARM:
				sequence_Parm(context, (Parm) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Atrib returns Atrib
	 *
	 * Constraint:
	 *     (
	 *         (atribName=ID Tipo=INT_TYPES ValueInt=INT?) | 
	 *         (atribName=ID Tipo='boolean' ValueBool=BOOL?) | 
	 *         (atribName=ID Tipo=FLOAT_TYPES ValueFlo=FLOAT?) | 
	 *         (atribName=ID Tipo='String' ValueStr=STRING?) | 
	 *         (atribName=ID Tipo='char' ValueChr=CHAR?) | 
	 *         (atribName=ID Tipo=TYPE_NAME)
	 *     )
	 */
	protected void sequence_Atrib(ISerializationContext context, Atrib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Body returns Body
	 *
	 * Constraint:
	 *     (elem+=Elem | globAtrib+=Atrib)
	 */
	protected void sequence_Body(ISerializationContext context, Body semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Elem returns Elem
	 *
	 * Constraint:
	 *     (ClassName=ID field+=Field*)
	 */
	protected void sequence_Elem(ISerializationContext context, Elem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (atrib=Atrib | method=Method)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (mName=ID par+=Parm* Tipo=VALID_TYPES implem=ALMOST__ANY__THING?)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     body+=Body*
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parm returns Parm
	 *
	 * Constraint:
	 *     (atribName=ID Tipo_atri=VALID_TYPES)
	 */
	protected void sequence_Parm(ISerializationContext context, Parm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.PARM__ATRIB_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.PARM__ATRIB_NAME));
			if (transientValues.isValueTransient(semanticObject, RestPackage.Literals.PARM__TIPO_ATRI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestPackage.Literals.PARM__TIPO_ATRI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParmAccess().getAtribNameIDTerminalRuleCall_0_0(), semanticObject.getAtribName());
		feeder.accept(grammarAccess.getParmAccess().getTipo_atriVALID_TYPESParserRuleCall_2_0(), semanticObject.getTipo_atri());
		feeder.finish();
	}
	
	
}
