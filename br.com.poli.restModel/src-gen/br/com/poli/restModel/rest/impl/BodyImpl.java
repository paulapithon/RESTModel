/**
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.rest.impl;

import br.com.poli.restModel.rest.Atrib;
import br.com.poli.restModel.rest.Body;
import br.com.poli.restModel.rest.Elem;
import br.com.poli.restModel.rest.RestPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.com.poli.restModel.rest.impl.BodyImpl#getElem <em>Elem</em>}</li>
 *   <li>{@link br.com.poli.restModel.rest.impl.BodyImpl#getGlobAtrib <em>Glob Atrib</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BodyImpl extends MinimalEObjectImpl.Container implements Body
{
  /**
   * The cached value of the '{@link #getElem() <em>Elem</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElem()
   * @generated
   * @ordered
   */
  protected EList<Elem> elem;

  /**
   * The cached value of the '{@link #getGlobAtrib() <em>Glob Atrib</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGlobAtrib()
   * @generated
   * @ordered
   */
  protected EList<Atrib> globAtrib;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RestPackage.Literals.BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Elem> getElem()
  {
    if (elem == null)
    {
      elem = new EObjectContainmentEList<Elem>(Elem.class, this, RestPackage.BODY__ELEM);
    }
    return elem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Atrib> getGlobAtrib()
  {
    if (globAtrib == null)
    {
      globAtrib = new EObjectContainmentEList<Atrib>(Atrib.class, this, RestPackage.BODY__GLOB_ATRIB);
    }
    return globAtrib;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RestPackage.BODY__ELEM:
        return ((InternalEList<?>)getElem()).basicRemove(otherEnd, msgs);
      case RestPackage.BODY__GLOB_ATRIB:
        return ((InternalEList<?>)getGlobAtrib()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RestPackage.BODY__ELEM:
        return getElem();
      case RestPackage.BODY__GLOB_ATRIB:
        return getGlobAtrib();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RestPackage.BODY__ELEM:
        getElem().clear();
        getElem().addAll((Collection<? extends Elem>)newValue);
        return;
      case RestPackage.BODY__GLOB_ATRIB:
        getGlobAtrib().clear();
        getGlobAtrib().addAll((Collection<? extends Atrib>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RestPackage.BODY__ELEM:
        getElem().clear();
        return;
      case RestPackage.BODY__GLOB_ATRIB:
        getGlobAtrib().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RestPackage.BODY__ELEM:
        return elem != null && !elem.isEmpty();
      case RestPackage.BODY__GLOB_ATRIB:
        return globAtrib != null && !globAtrib.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BodyImpl
