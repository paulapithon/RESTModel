/**
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.rest.impl;

import br.com.poli.restModel.rest.Method;
import br.com.poli.restModel.rest.Parm;
import br.com.poli.restModel.rest.RestPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.com.poli.restModel.rest.impl.MethodImpl#getMName <em>MName</em>}</li>
 *   <li>{@link br.com.poli.restModel.rest.impl.MethodImpl#getPar <em>Par</em>}</li>
 *   <li>{@link br.com.poli.restModel.rest.impl.MethodImpl#getTipo <em>Tipo</em>}</li>
 *   <li>{@link br.com.poli.restModel.rest.impl.MethodImpl#getImplem <em>Implem</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodImpl extends MinimalEObjectImpl.Container implements Method
{
  /**
   * The default value of the '{@link #getMName() <em>MName</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMName()
   * @generated
   * @ordered
   */
  protected static final String MNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMName() <em>MName</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMName()
   * @generated
   * @ordered
   */
  protected String mName = MNAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getPar() <em>Par</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPar()
   * @generated
   * @ordered
   */
  protected EList<Parm> par;

  /**
   * The default value of the '{@link #getTipo() <em>Tipo</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTipo()
   * @generated
   * @ordered
   */
  protected static final String TIPO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTipo() <em>Tipo</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTipo()
   * @generated
   * @ordered
   */
  protected String tipo = TIPO_EDEFAULT;

  /**
   * The default value of the '{@link #getImplem() <em>Implem</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplem()
   * @generated
   * @ordered
   */
  protected static final String IMPLEM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getImplem() <em>Implem</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplem()
   * @generated
   * @ordered
   */
  protected String implem = IMPLEM_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RestPackage.Literals.METHOD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMName()
  {
    return mName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMName(String newMName)
  {
    String oldMName = mName;
    mName = newMName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RestPackage.METHOD__MNAME, oldMName, mName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Parm> getPar()
  {
    if (par == null)
    {
      par = new EObjectContainmentEList<Parm>(Parm.class, this, RestPackage.METHOD__PAR);
    }
    return par;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTipo()
  {
    return tipo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTipo(String newTipo)
  {
    String oldTipo = tipo;
    tipo = newTipo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RestPackage.METHOD__TIPO, oldTipo, tipo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getImplem()
  {
    return implem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImplem(String newImplem)
  {
    String oldImplem = implem;
    implem = newImplem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RestPackage.METHOD__IMPLEM, oldImplem, implem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RestPackage.METHOD__PAR:
        return ((InternalEList<?>)getPar()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RestPackage.METHOD__MNAME:
        return getMName();
      case RestPackage.METHOD__PAR:
        return getPar();
      case RestPackage.METHOD__TIPO:
        return getTipo();
      case RestPackage.METHOD__IMPLEM:
        return getImplem();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RestPackage.METHOD__MNAME:
        setMName((String)newValue);
        return;
      case RestPackage.METHOD__PAR:
        getPar().clear();
        getPar().addAll((Collection<? extends Parm>)newValue);
        return;
      case RestPackage.METHOD__TIPO:
        setTipo((String)newValue);
        return;
      case RestPackage.METHOD__IMPLEM:
        setImplem((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RestPackage.METHOD__MNAME:
        setMName(MNAME_EDEFAULT);
        return;
      case RestPackage.METHOD__PAR:
        getPar().clear();
        return;
      case RestPackage.METHOD__TIPO:
        setTipo(TIPO_EDEFAULT);
        return;
      case RestPackage.METHOD__IMPLEM:
        setImplem(IMPLEM_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RestPackage.METHOD__MNAME:
        return MNAME_EDEFAULT == null ? mName != null : !MNAME_EDEFAULT.equals(mName);
      case RestPackage.METHOD__PAR:
        return par != null && !par.isEmpty();
      case RestPackage.METHOD__TIPO:
        return TIPO_EDEFAULT == null ? tipo != null : !TIPO_EDEFAULT.equals(tipo);
      case RestPackage.METHOD__IMPLEM:
        return IMPLEM_EDEFAULT == null ? implem != null : !IMPLEM_EDEFAULT.equals(implem);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (mName: ");
    result.append(mName);
    result.append(", Tipo: ");
    result.append(tipo);
    result.append(", implem: ");
    result.append(implem);
    result.append(')');
    return result.toString();
  }

} //MethodImpl
