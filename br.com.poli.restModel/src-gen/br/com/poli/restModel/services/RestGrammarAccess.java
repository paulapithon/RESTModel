/*
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RestGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	{Model} "Request" '{' body+=Body* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} "Request" '{' body+=Body* '}'
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//"Request"
		public Keyword getRequestKeyword_1() { return cRequestKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//body+=Body*
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_3_0() { return cBodyBodyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.Body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElemAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElemElemParserRuleCall_0_0 = (RuleCall)cElemAssignment_0.eContents().get(0);
		private final Assignment cGlobAtribAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cGlobAtribGlobAtribParserRuleCall_1_0 = (RuleCall)cGlobAtribAssignment_1.eContents().get(0);
		
		//Body:
		//	elem=Elem | globAtrib=GlobAtrib;
		@Override public ParserRule getRule() { return rule; }
		
		//elem=Elem | globAtrib=GlobAtrib
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//elem=Elem
		public Assignment getElemAssignment_0() { return cElemAssignment_0; }
		
		//Elem
		public RuleCall getElemElemParserRuleCall_0_0() { return cElemElemParserRuleCall_0_0; }
		
		//globAtrib=GlobAtrib
		public Assignment getGlobAtribAssignment_1() { return cGlobAtribAssignment_1; }
		
		//GlobAtrib
		public RuleCall getGlobAtribGlobAtribParserRuleCall_1_0() { return cGlobAtribGlobAtribParserRuleCall_1_0; }
	}
	public class ElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.Elem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassNameIDTerminalRuleCall_0_0 = (RuleCall)cClassNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPackageKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPackageAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPackagePackageNameParserRuleCall_2_1_0 = (RuleCall)cPackageAssignment_2_1.eContents().get(0);
		private final Assignment cAtribAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAtribAtribParserRuleCall_3_0 = (RuleCall)cAtribAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Elem:
		//	ClassName=ID '{' ('package' package=PackageName)? atrib+=Atrib* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//ClassName=ID '{' ('package' package=PackageName)? atrib+=Atrib* '}'
		public Group getGroup() { return cGroup; }
		
		//ClassName=ID
		public Assignment getClassNameAssignment_0() { return cClassNameAssignment_0; }
		
		//ID
		public RuleCall getClassNameIDTerminalRuleCall_0_0() { return cClassNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('package' package=PackageName)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'package'
		public Keyword getPackageKeyword_2_0() { return cPackageKeyword_2_0; }
		
		//package=PackageName
		public Assignment getPackageAssignment_2_1() { return cPackageAssignment_2_1; }
		
		//PackageName
		public RuleCall getPackagePackageNameParserRuleCall_2_1_0() { return cPackagePackageNameParserRuleCall_2_1_0; }
		
		//atrib+=Atrib*
		public Assignment getAtribAssignment_3() { return cAtribAssignment_3; }
		
		//Atrib
		public RuleCall getAtribAtribParserRuleCall_3_0() { return cAtribAtribParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AtribElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.Atrib");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtribNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtribNameIDTerminalRuleCall_0_0 = (RuleCall)cAtribNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTipoAlternatives_2_0 = (Alternatives)cTipoAssignment_2.eContents().get(0);
		private final RuleCall cTipoVALID_TYPESParserRuleCall_2_0_0 = (RuleCall)cTipoAlternatives_2_0.eContents().get(0);
		private final RuleCall cTipoTYPE_NAMEParserRuleCall_2_0_1 = (RuleCall)cTipoAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueValuesParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//Atrib:
		//	atribName=ID ":" Tipo=(VALID_TYPES | TYPE_NAME) (":" Value=Values)?;
		@Override public ParserRule getRule() { return rule; }
		
		//atribName=ID ":" Tipo=(VALID_TYPES | TYPE_NAME) (":" Value=Values)?
		public Group getGroup() { return cGroup; }
		
		//atribName=ID
		public Assignment getAtribNameAssignment_0() { return cAtribNameAssignment_0; }
		
		//ID
		public RuleCall getAtribNameIDTerminalRuleCall_0_0() { return cAtribNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Tipo=(VALID_TYPES | TYPE_NAME)
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//(VALID_TYPES | TYPE_NAME)
		public Alternatives getTipoAlternatives_2_0() { return cTipoAlternatives_2_0; }
		
		//VALID_TYPES
		public RuleCall getTipoVALID_TYPESParserRuleCall_2_0_0() { return cTipoVALID_TYPESParserRuleCall_2_0_0; }
		
		//TYPE_NAME
		public RuleCall getTipoTYPE_NAMEParserRuleCall_2_0_1() { return cTipoTYPE_NAMEParserRuleCall_2_0_1; }
		
		//(":" Value=Values)?
		public Group getGroup_3() { return cGroup_3; }
		
		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//Value=Values
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Values
		public RuleCall getValueValuesParserRuleCall_3_1_0() { return cValueValuesParserRuleCall_3_1_0; }
	}
	public class GlobAtribElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.GlobAtrib");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtribNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtribNameIDTerminalRuleCall_0_0 = (RuleCall)cAtribNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTipoAlternatives_2_0 = (Alternatives)cTipoAssignment_2.eContents().get(0);
		private final RuleCall cTipoVALID_TYPESParserRuleCall_2_0_0 = (RuleCall)cTipoAlternatives_2_0.eContents().get(0);
		private final RuleCall cTipoTYPE_NAMEParserRuleCall_2_0_1 = (RuleCall)cTipoAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueValuesParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//GlobAtrib:
		//	atribName=ID ":" Tipo=(VALID_TYPES | TYPE_NAME) (":" Value=Values);
		@Override public ParserRule getRule() { return rule; }
		
		//atribName=ID ":" Tipo=(VALID_TYPES | TYPE_NAME) (":" Value=Values)
		public Group getGroup() { return cGroup; }
		
		//atribName=ID
		public Assignment getAtribNameAssignment_0() { return cAtribNameAssignment_0; }
		
		//ID
		public RuleCall getAtribNameIDTerminalRuleCall_0_0() { return cAtribNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Tipo=(VALID_TYPES | TYPE_NAME)
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//(VALID_TYPES | TYPE_NAME)
		public Alternatives getTipoAlternatives_2_0() { return cTipoAlternatives_2_0; }
		
		//VALID_TYPES
		public RuleCall getTipoVALID_TYPESParserRuleCall_2_0_0() { return cTipoVALID_TYPESParserRuleCall_2_0_0; }
		
		//TYPE_NAME
		public RuleCall getTipoTYPE_NAMEParserRuleCall_2_0_1() { return cTipoTYPE_NAMEParserRuleCall_2_0_1; }
		
		//":" Value=Values
		public Group getGroup_3() { return cGroup_3; }
		
		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//Value=Values
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Values
		public RuleCall getValueValuesParserRuleCall_3_1_0() { return cValueValuesParserRuleCall_3_1_0; }
	}
	public class ValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.Values");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValuesAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdINTTerminalRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValuesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIdBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdBBOOLTerminalRuleCall_1_1_0 = (RuleCall)cIdBAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cValuesAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cIdFAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdFFLOATTerminalRuleCall_2_1_0 = (RuleCall)cIdFAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cValuesAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cIdSAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdSSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cIdSAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cValuesAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cIdCAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdCCHARTerminalRuleCall_4_1_0 = (RuleCall)cIdCAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cNewKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIdTAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIdTIDTerminalRuleCall_5_1_0 = (RuleCall)cIdTAssignment_5_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Group cGroup_5_3_0 = (Group)cGroup_5_3.eContents().get(0);
		private final Assignment cParAssignment_5_3_0_0 = (Assignment)cGroup_5_3_0.eContents().get(0);
		private final RuleCall cParIDTerminalRuleCall_5_3_0_0_0 = (RuleCall)cParAssignment_5_3_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_5_3_0_1 = (Keyword)cGroup_5_3_0.eContents().get(1);
		private final Assignment cParAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cParIDTerminalRuleCall_5_3_1_0 = (RuleCall)cParAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//Values:
		//	{Values} Id=INT | {Values} IdB=BOOL | {Values} IdF=FLOAT | {Values} IdS=STRING | {Values} IdC=CHAR | 'new' IdT=ID '('
		//	((Par+=ID ',')* Par+=ID)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Values} Id=INT | {Values} IdB=BOOL | {Values} IdF=FLOAT | {Values} IdS=STRING | {Values} IdC=CHAR | 'new' IdT=ID '('
		//((Par+=ID ',')* Par+=ID)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Values} Id=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{Values}
		public Action getValuesAction_0_0() { return cValuesAction_0_0; }
		
		//Id=INT
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_0_1_0() { return cIdINTTerminalRuleCall_0_1_0; }
		
		//{Values} IdB=BOOL
		public Group getGroup_1() { return cGroup_1; }
		
		//{Values}
		public Action getValuesAction_1_0() { return cValuesAction_1_0; }
		
		//IdB=BOOL
		public Assignment getIdBAssignment_1_1() { return cIdBAssignment_1_1; }
		
		//BOOL
		public RuleCall getIdBBOOLTerminalRuleCall_1_1_0() { return cIdBBOOLTerminalRuleCall_1_1_0; }
		
		//{Values} IdF=FLOAT
		public Group getGroup_2() { return cGroup_2; }
		
		//{Values}
		public Action getValuesAction_2_0() { return cValuesAction_2_0; }
		
		//IdF=FLOAT
		public Assignment getIdFAssignment_2_1() { return cIdFAssignment_2_1; }
		
		//FLOAT
		public RuleCall getIdFFLOATTerminalRuleCall_2_1_0() { return cIdFFLOATTerminalRuleCall_2_1_0; }
		
		//{Values} IdS=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{Values}
		public Action getValuesAction_3_0() { return cValuesAction_3_0; }
		
		//IdS=STRING
		public Assignment getIdSAssignment_3_1() { return cIdSAssignment_3_1; }
		
		//STRING
		public RuleCall getIdSSTRINGTerminalRuleCall_3_1_0() { return cIdSSTRINGTerminalRuleCall_3_1_0; }
		
		//{Values} IdC=CHAR
		public Group getGroup_4() { return cGroup_4; }
		
		//{Values}
		public Action getValuesAction_4_0() { return cValuesAction_4_0; }
		
		//IdC=CHAR
		public Assignment getIdCAssignment_4_1() { return cIdCAssignment_4_1; }
		
		//CHAR
		public RuleCall getIdCCHARTerminalRuleCall_4_1_0() { return cIdCCHARTerminalRuleCall_4_1_0; }
		
		//'new' IdT=ID '(' ((Par+=ID ',')* Par+=ID)? ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'new'
		public Keyword getNewKeyword_5_0() { return cNewKeyword_5_0; }
		
		//IdT=ID
		public Assignment getIdTAssignment_5_1() { return cIdTAssignment_5_1; }
		
		//ID
		public RuleCall getIdTIDTerminalRuleCall_5_1_0() { return cIdTIDTerminalRuleCall_5_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//((Par+=ID ',')* Par+=ID)?
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//(Par+=ID ',')*
		public Group getGroup_5_3_0() { return cGroup_5_3_0; }
		
		//Par+=ID
		public Assignment getParAssignment_5_3_0_0() { return cParAssignment_5_3_0_0; }
		
		//ID
		public RuleCall getParIDTerminalRuleCall_5_3_0_0_0() { return cParIDTerminalRuleCall_5_3_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_5_3_0_1() { return cCommaKeyword_5_3_0_1; }
		
		//Par+=ID
		public Assignment getParAssignment_5_3_1() { return cParAssignment_5_3_1; }
		
		//ID
		public RuleCall getParIDTerminalRuleCall_5_3_1_0() { return cParIDTerminalRuleCall_5_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
	}
	public class ParmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.Parm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtribNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtribNameIDTerminalRuleCall_0_0 = (RuleCall)cAtribNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipo_atriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTipo_atriAlternatives_2_0 = (Alternatives)cTipo_atriAssignment_2.eContents().get(0);
		private final RuleCall cTipo_atriVALID_TYPESParserRuleCall_2_0_0 = (RuleCall)cTipo_atriAlternatives_2_0.eContents().get(0);
		private final RuleCall cTipo_atriTYPE_NAMEParserRuleCall_2_0_1 = (RuleCall)cTipo_atriAlternatives_2_0.eContents().get(1);
		
		//Parm:
		//	atribName=ID ':' Tipo_atri=(VALID_TYPES | TYPE_NAME);
		@Override public ParserRule getRule() { return rule; }
		
		//atribName=ID ':' Tipo_atri=(VALID_TYPES | TYPE_NAME)
		public Group getGroup() { return cGroup; }
		
		//atribName=ID
		public Assignment getAtribNameAssignment_0() { return cAtribNameAssignment_0; }
		
		//ID
		public RuleCall getAtribNameIDTerminalRuleCall_0_0() { return cAtribNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Tipo_atri=(VALID_TYPES | TYPE_NAME)
		public Assignment getTipo_atriAssignment_2() { return cTipo_atriAssignment_2; }
		
		//(VALID_TYPES | TYPE_NAME)
		public Alternatives getTipo_atriAlternatives_2_0() { return cTipo_atriAlternatives_2_0; }
		
		//VALID_TYPES
		public RuleCall getTipo_atriVALID_TYPESParserRuleCall_2_0_0() { return cTipo_atriVALID_TYPESParserRuleCall_2_0_0; }
		
		//TYPE_NAME
		public RuleCall getTipo_atriTYPE_NAMEParserRuleCall_2_0_1() { return cTipo_atriTYPE_NAMEParserRuleCall_2_0_1; }
	}
	public class TYPE_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.TYPE_NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cVALID_TYPESParserRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_1_2_0 = (RuleCall)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cVALID_TYPESParserRuleCall_1_2_1 = (RuleCall)cAlternatives_1_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TYPE_NAME:
		//	ID ('<' ((ID | VALID_TYPES) ',')* (ID | VALID_TYPES) '>')?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('<' ((ID | VALID_TYPES) ',')* (ID | VALID_TYPES) '>')?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('<' ((ID | VALID_TYPES) ',')* (ID | VALID_TYPES) '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//((ID | VALID_TYPES) ',')*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//ID | VALID_TYPES
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0_0() { return cIDTerminalRuleCall_1_1_0_0; }
		
		//VALID_TYPES
		public RuleCall getVALID_TYPESParserRuleCall_1_1_0_1() { return cVALID_TYPESParserRuleCall_1_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }
		
		//ID | VALID_TYPES
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2_0() { return cIDTerminalRuleCall_1_2_0; }
		
		//VALID_TYPES
		public RuleCall getVALID_TYPESParserRuleCall_1_2_1() { return cVALID_TYPESParserRuleCall_1_2_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class VALID_TYPESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.VALID_TYPES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCharKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final RuleCall cINT_TYPESTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFLOAT_TYPESTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//VALID_TYPES:
		//	"String"
		//	| 'boolean'
		//	| "char"
		//	| INT_TYPES
		//	| FLOAT_TYPES;
		@Override public ParserRule getRule() { return rule; }
		
		//"String" | 'boolean' | "char" | INT_TYPES | FLOAT_TYPES
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
		
		//"char"
		public Keyword getCharKeyword_2() { return cCharKeyword_2; }
		
		//INT_TYPES
		public RuleCall getINT_TYPESTerminalRuleCall_3() { return cINT_TYPESTerminalRuleCall_3; }
		
		//FLOAT_TYPES
		public RuleCall getFLOAT_TYPESTerminalRuleCall_4() { return cFLOAT_TYPESTerminalRuleCall_4; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.PackageName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PackageName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final BodyElements pBody;
	private final ElemElements pElem;
	private final AtribElements pAtrib;
	private final GlobAtribElements pGlobAtrib;
	private final ValuesElements pValues;
	private final ParmElements pParm;
	private final TYPE_NAMEElements pTYPE_NAME;
	private final VALID_TYPESElements pVALID_TYPES;
	private final PackageNameElements pPackageName;
	private final TerminalRule tBOOL;
	private final TerminalRule tFLOAT;
	private final TerminalRule tCHAR;
	private final TerminalRule tINT_TYPES;
	private final TerminalRule tFLOAT_TYPES;
	private final TerminalRule tWS;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tALMOST__ANY__THING;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RestGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pBody = new BodyElements();
		this.pElem = new ElemElements();
		this.pAtrib = new AtribElements();
		this.pGlobAtrib = new GlobAtribElements();
		this.pValues = new ValuesElements();
		this.pParm = new ParmElements();
		this.pTYPE_NAME = new TYPE_NAMEElements();
		this.pVALID_TYPES = new VALID_TYPESElements();
		this.pPackageName = new PackageNameElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.BOOL");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.FLOAT");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.CHAR");
		this.tINT_TYPES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.INT_TYPES");
		this.tFLOAT_TYPES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.FLOAT_TYPES");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.WS");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.ML_COMMENT");
		this.tALMOST__ANY__THING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.ALMOST__ANY__THING");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.restModel.Rest.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.com.poli.restModel.Rest".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} "Request" '{' body+=Body* '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Body:
	//	elem=Elem | globAtrib=GlobAtrib;
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//Elem:
	//	ClassName=ID '{' ('package' package=PackageName)? atrib+=Atrib* '}';
	public ElemElements getElemAccess() {
		return pElem;
	}
	
	public ParserRule getElemRule() {
		return getElemAccess().getRule();
	}
	
	//Atrib:
	//	atribName=ID ":" Tipo=(VALID_TYPES | TYPE_NAME) (":" Value=Values)?;
	public AtribElements getAtribAccess() {
		return pAtrib;
	}
	
	public ParserRule getAtribRule() {
		return getAtribAccess().getRule();
	}
	
	//GlobAtrib:
	//	atribName=ID ":" Tipo=(VALID_TYPES | TYPE_NAME) (":" Value=Values);
	public GlobAtribElements getGlobAtribAccess() {
		return pGlobAtrib;
	}
	
	public ParserRule getGlobAtribRule() {
		return getGlobAtribAccess().getRule();
	}
	
	//Values:
	//	{Values} Id=INT | {Values} IdB=BOOL | {Values} IdF=FLOAT | {Values} IdS=STRING | {Values} IdC=CHAR | 'new' IdT=ID '('
	//	((Par+=ID ',')* Par+=ID)? ')';
	public ValuesElements getValuesAccess() {
		return pValues;
	}
	
	public ParserRule getValuesRule() {
		return getValuesAccess().getRule();
	}
	
	//Parm:
	//	atribName=ID ':' Tipo_atri=(VALID_TYPES | TYPE_NAME);
	public ParmElements getParmAccess() {
		return pParm;
	}
	
	public ParserRule getParmRule() {
		return getParmAccess().getRule();
	}
	
	//TYPE_NAME:
	//	ID ('<' ((ID | VALID_TYPES) ',')* (ID | VALID_TYPES) '>')?;
	public TYPE_NAMEElements getTYPE_NAMEAccess() {
		return pTYPE_NAME;
	}
	
	public ParserRule getTYPE_NAMERule() {
		return getTYPE_NAMEAccess().getRule();
	}
	
	//VALID_TYPES:
	//	"String"
	//	| 'boolean'
	//	| "char"
	//	| INT_TYPES
	//	| FLOAT_TYPES;
	public VALID_TYPESElements getVALID_TYPESAccess() {
		return pVALID_TYPES;
	}
	
	public ParserRule getVALID_TYPESRule() {
		return getVALID_TYPESAccess().getRule();
	}
	
	//PackageName:
	//	ID ('.' ID)*;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//terminal BOOL:
	//	"True" | "False";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	'1'..'9' '0'..'9'* '.' '0'..'9'+;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal CHAR returns ecore::EChar:
	//	'\'' . '\'';
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal INT_TYPES:
	//	"int" | "long" | "short" | "byte";
	public TerminalRule getINT_TYPESRule() {
		return tINT_TYPES;
	}
	
	//terminal FLOAT_TYPES:
	//	"float" | "double";
	public TerminalRule getFLOAT_TYPESRule() {
		return tFLOAT_TYPES;
	}
	
	//@Override
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//@Override
	//terminal ML_COMMENT:
	//	'##'->'##';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal ALMOST__ANY__THING:
	//	':' '{' !'}'* '}';
	public TerminalRule getALMOST__ANY__THINGRule() {
		return tALMOST__ANY__THING;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
