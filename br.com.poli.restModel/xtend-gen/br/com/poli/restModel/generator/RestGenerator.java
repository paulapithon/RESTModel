/**
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.generator;

import br.com.poli.restModel.rest.Atrib;
import br.com.poli.restModel.rest.Body;
import br.com.poli.restModel.rest.Elem;
import br.com.poli.restModel.rest.GlobAtrib;
import br.com.poli.restModel.rest.Values;
import com.google.common.collect.Iterables;
import java.security.InvalidParameterException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RestGenerator extends AbstractGenerator {
  private Map<String, String> atrHash;
  
  private String className;
  
  private Map<String, GlobAtrib> globals;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    HashMap<String, GlobAtrib> _hashMap = new HashMap<String, GlobAtrib>();
    this.globals = _hashMap;
    fsa.generateFile("br/com/poli/RestModelAutoGerated/RestException.java", this.gerateException());
    Iterable<Body> _filter = Iterables.<Body>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Body.class);
    for (final Body body : _filter) {
      GlobAtrib _globAtrib = body.getGlobAtrib();
      boolean _tripleNotEquals = (_globAtrib != null);
      if (_tripleNotEquals) {
        GlobAtrib _put = this.globals.put(body.getGlobAtrib().getAtribName(), body.getGlobAtrib());
        boolean _tripleNotEquals_1 = (_put != null);
        if (_tripleNotEquals_1) {
          throw new InvalidParameterException();
        }
      } else {
        Elem _elem = body.getElem();
        boolean _tripleNotEquals_2 = (_elem != null);
        if (_tripleNotEquals_2) {
          this.className = body.getElem().getClassName();
          HashMap<String, String> _hashMap_1 = new HashMap<String, String>();
          this.atrHash = _hashMap_1;
          String _package = body.getElem().getPackage();
          boolean _tripleNotEquals_3 = (_package != null);
          if (_tripleNotEquals_3) {
            String _replaceAll = body.getElem().getPackage().replaceAll("\\.", "/");
            String _plus = (_replaceAll + "/");
            String _className = body.getElem().getClassName();
            String _plus_1 = (_plus + _className);
            String _plus_2 = (_plus_1 + 
              ".java");
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("package ");
            String _package_1 = body.getElem().getPackage();
            _builder.append(_package_1);
            _builder.newLineIfNotEmpty();
            CharSequence _compile = this.compile(body.getElem());
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
            fsa.generateFile(_plus_2, _builder);
          } else {
            String _className_1 = body.getElem().getClassName();
            String _plus_3 = (_className_1 + ".java");
            fsa.generateFile(_plus_3, this.compile(body.getElem()));
          }
        }
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package br.com.poli.RestModelAutoGerated");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class RestGlobals{");
    _builder_1.newLine();
    {
      boolean _exist = this.exist("HOST");
      boolean _not = (!_exist);
      if (_not) {
        _builder_1.append("\t");
        _builder_1.append("public static final String HOST = \"http://localhost:8080/\"");
        _builder_1.newLine();
      }
    }
    {
      Set<Map.Entry<String, GlobAtrib>> _entrySet = this.globals.entrySet();
      for(final Map.Entry<String, GlobAtrib> element : _entrySet) {
        CharSequence _compile_1 = this.compile(element.getValue());
        _builder_1.append(_compile_1);
        _builder_1.newLineIfNotEmpty();
      }
    }
    _builder_1.newLine();
    _builder_1.append("}");
    fsa.generateFile("br/com/poli/RestModelAutoGerated/RestGlobals.java", _builder_1);
  }
  
  public CharSequence gerateException() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package br.com.poli.RestModelAutoGerated;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("public class RestException extends RuntimeException{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public RestException(String msg) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(msg);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public RestException(String msg,Throwable e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(msg,e);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public RestException(Throwable e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(e);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Elem elem) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import br.com.poli.RestModelAutoGerated.RestGlobals");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.BufferedReader;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.io.InputStreamReader;");
    _builder.newLine();
    _builder.append("import java.io.OutputStream;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("import java.net.HttpURLConnection;");
    _builder.newLine();
    _builder.append("import java.net.MalformedURLException;");
    _builder.newLine();
    _builder.append("import java.net.URL;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _className = elem.getClassName();
    _builder.append(_className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Atrib> _atrib = elem.getAtrib();
      for(final Atrib art : _atrib) {
        CharSequence _compile = this.compile(art);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    CharSequence _gerateConstructor = this.gerateConstructor();
    _builder.append(_gerateConstructor, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _gerateGetters = this.gerateGetters();
    _builder.append(_gerateGetters, "\t");
    CharSequence _gerateSetters = this.gerateSetters();
    _builder.append(_gerateSetters, "\t");
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _gerateGetRequest = this.gerateGetRequest();
    _builder.append(_gerateGetRequest, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _geratePostRequest = this.geratePostRequest();
    _builder.append(_geratePostRequest, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private String toServer(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence geratePostRequest() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public String Post() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String rValue = \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("URL url = new URL(RestGlobals.HOST);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HttpURLConnection conn = (HttpURLConnection) url.openConnection();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("conn.setDoOutput(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("conn.setRequestMethod(\"POST\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("conn.setRequestProperty(\"Content-Type\", \"application/json\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String input = this.toServer();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("OutputStream os = conn.getOutputStream();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("os.write(input.getBytes());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("os.flush();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (conn.getResponseCode() != HttpURLConnection.HTTP_CREATED) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("throw new RestException(\"Failed : HTTP error code : \" + conn.getResponseCode());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String output;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while ((output = br.readLine()) != null) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rValue += (output) + \"\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("conn.disconnect();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (MalformedURLException | IOException e) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("throw new RestException(e);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return rValue;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence gerateGetRequest() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public String request() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String rValue = \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("URL url = new URL(RestGlobals.HOST);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HttpURLConnection conn = (HttpURLConnection) url.openConnection();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("conn.setRequestMethod(\"GET\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("conn.setRequestProperty(\"Accept\", \"application/json\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (conn.getResponseCode() != 200) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("throw new RestException(\"Failed : HTTP error code : \" + conn.getResponseCode());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String output;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while ((output = br.readLine()) != null) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rValue += (output) + \"\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("conn.disconnect();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (MalformedURLException | IOException e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new RestException(e);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return rValue;");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence gerateConstructor() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    _builder.append(this.className);
    _builder.append(" (");
    {
      Set<Map.Entry<String, String>> _entrySet = this.atrHash.entrySet();
      boolean _hasElements = false;
      for(final Map.Entry<String, String> art : _entrySet) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(" ");
        String _value = art.getValue();
        _builder.append(_value);
        _builder.append(" ");
        String _lowerCase = art.getKey().toLowerCase();
        _builder.append(_lowerCase);
      }
    }
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    {
      Set<Map.Entry<String, String>> _entrySet_1 = this.atrHash.entrySet();
      for(final Map.Entry<String, String> art_1 : _entrySet_1) {
        _builder.append("\t");
        _builder.append("this.");
        String _lowerCase_1 = art_1.getKey().toLowerCase();
        _builder.append(_lowerCase_1, "\t");
        _builder.append(" = ");
        String _lowerCase_2 = art_1.getKey().toLowerCase();
        _builder.append(_lowerCase_2, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence gerateGetters() {
    StringConcatenation _builder = new StringConcatenation();
    {
      Set<Map.Entry<String, String>> _entrySet = this.atrHash.entrySet();
      for(final Map.Entry<String, String> art : _entrySet) {
        _builder.append("public ");
        String _value = art.getValue();
        _builder.append(_value);
        _builder.append(" get");
        String _firstUpper = StringExtensions.toFirstUpper(art.getKey());
        _builder.append(_firstUpper);
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return this.");
        String _lowerCase = art.getKey().toLowerCase();
        _builder.append(_lowerCase, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence gerateSetters() {
    StringConcatenation _builder = new StringConcatenation();
    {
      Set<Map.Entry<String, String>> _entrySet = this.atrHash.entrySet();
      for(final Map.Entry<String, String> art : _entrySet) {
        _builder.append("public void set");
        String _firstUpper = StringExtensions.toFirstUpper(art.getKey());
        _builder.append(_firstUpper);
        _builder.append("(");
        String _value = art.getValue();
        _builder.append(_value);
        _builder.append(" ");
        String _lowerCase = art.getKey().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("this.");
        String _lowerCase_1 = art.getKey().toLowerCase();
        _builder.append(_lowerCase_1, "\t");
        _builder.append(" = ");
        String _lowerCase_2 = art.getKey().toLowerCase();
        _builder.append(_lowerCase_2, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Atrib atr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("private ");
    String _tipo = atr.getTipo();
    _builder.append(_tipo, "\t");
    _builder.append(" ");
    String _firstLower = StringExtensions.toFirstLower(atr.getAtribName());
    _builder.append(_firstLower, "\t");
    {
      Values _value = atr.getValue();
      boolean _tripleNotEquals = (_value != null);
      if (_tripleNotEquals) {
        _builder.append(" = ");
        Values _value_1 = atr.getValue();
        _builder.append(_value_1, "\t");
        _builder.append(" ");
      }
    }
    _builder.append(";");
    String _put = this.atrHash.put(atr.getAtribName(), atr.getTipo());
    boolean _tripleNotEquals_1 = (_put != null);
    if (_tripleNotEquals_1) {
      throw new InvalidParameterException();
    }
    return _builder;
  }
  
  public CharSequence compile(final GlobAtrib atr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("public static final ");
    String _tipo = atr.getTipo();
    _builder.append(_tipo, "\t");
    _builder.append(" ");
    String _upperCase = atr.getAtribName().toUpperCase();
    _builder.append(_upperCase, "\t");
    _builder.append("  = ");
    CharSequence _compileAndCheck = this.compileAndCheck(atr.getValue(), atr.getTipo());
    _builder.append(_compileAndCheck, "\t");
    _builder.append(";");
    return _builder;
  }
  
  public CharSequence compileAndCheck(final Values atr, final String tipo) {
    if (((!StringExtensions.isNullOrEmpty(atr.getIdB())) && tipo.toLowerCase().equals("boolean"))) {
      return atr.getIdB();
    } else {
      if (((!StringExtensions.isNullOrEmpty(atr.getIdS())) && tipo.toLowerCase().equals("string"))) {
        String _idS = atr.getIdS();
        String _plus = ("\"" + _idS);
        return (_plus + "\"");
      } else {
        if ((((tipo.toLowerCase().equals("int") || tipo.toLowerCase().equals("long")) || 
          tipo.toLowerCase().equals("short")) || tipo.toLowerCase().equals("byte"))) {
          StringConcatenation _builder = new StringConcatenation();
          int _id = atr.getId();
          _builder.append(_id);
          return _builder;
        } else {
          if ((tipo.toLowerCase().equals("float") || tipo.toLowerCase().equals("double"))) {
            StringConcatenation _builder_1 = new StringConcatenation();
            float _idF = atr.getIdF();
            _builder_1.append(_idF);
            return _builder_1;
          } else {
            boolean _equals = tipo.toLowerCase().equals("char");
            if (_equals) {
              StringConcatenation _builder_2 = new StringConcatenation();
              char _idC = atr.getIdC();
              _builder_2.append(_idC);
              return _builder_2;
            } else {
              String _idT = atr.getIdT();
              boolean _tripleNotEquals = (_idT != null);
              if (_tripleNotEquals) {
                StringConcatenation _builder_3 = new StringConcatenation();
                _builder_3.append("new ");
                String _idT_1 = atr.getIdT();
                _builder_3.append(_idT_1);
                _builder_3.append("(");
                {
                  EList<String> _par = atr.getPar();
                  boolean _hasElements = false;
                  for(final String par : _par) {
                    if (!_hasElements) {
                      _hasElements = true;
                    } else {
                      _builder_3.appendImmediate(",", "");
                    }
                    _builder_3.append(par);
                  }
                }
                _builder_3.append(");");
                return _builder_3;
              } else {
                throw new InvalidParameterException();
              }
            }
          }
        }
      }
    }
  }
  
  public boolean exist(final String elem) {
    Set<String> _keySet = this.globals.keySet();
    for (final String key : _keySet) {
      boolean _equals = key.equals(elem);
      if (_equals) {
        return true;
      }
    }
    return false;
  }
}
