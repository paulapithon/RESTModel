/*
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.generator

import br.com.poli.restModel.rest.Body
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import br.com.poli.restModel.rest.Elem
import br.com.poli.restModel.rest.Field
import br.com.poli.restModel.rest.Atrib
import br.com.poli.restModel.rest.Method

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RestGenerator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider
	String elem;

	String tipoElem;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (body : resource.allContents.toIterable.filter(Body)) {
			elem = "";
			tipoElem = "";
			if (body.globAtrib !== null) {
				for (element : body.globAtrib) {
					tipoElem = element.tipo;
					elem += "public final static " + tipoElem + " " + element.atribName;
					if (tipoElem.equals("boolean")) {
						elem += "=" + element.valueBool
					} else if (tipoElem.equals("String")) {
						elem += "=" + element.valueStr
					} else if (tipoElem.equals("char")) {
						elem += "=" + element.valueChr
					}

					elem += ";"
				}
			}
			for (elem : body.elem) {
				fsa.generateFile(elem.className + ".java", elem.compile)
			}
		}
	}
 
  	def CharSequence compile(Elem elem) '''
  		public class «elem.className» {
  		«FOR art : elem.field»
  			«art.compile»
  		«ENDFOR»			
  		}
  	'''
 	def CharSequence compile(Field f)
   '''
 		«IF f.method !== null»
 				«f.method.compile»
 		«ELSE»
 			«IF f.atrib !== null»
 					«f.atrib.compile»
 			«ENDIF»
 		«ENDIF»
 	'''
 	def CharSequence compile(Method met) '''
 	public «met.tipo» «met.MName» («FOR par : met.par SEPARATOR ','»«par.tipo_atri» «par.atribName» «ENDFOR»)«IF met.implem === null»;«ELSE»«met.implem.substring(1)»«ENDIF» 
  	'''
  	
  	def CharSequence compile(Atrib atr) '''
  			private «atr.tipo» «atr.atribName.toFirstLower»;

  			public «atr.tipo» get«atr.atribName.toFirstUpper»(){
  				returns this.«atr.atribName.toFirstLower»;
  			}

  			public void set«atr.atribName.toFirstUpper»(«atr.tipo» «atr.atribName.toFirstLower»){
  				this.«atr.atribName.toFirstLower» = «atr.atribName.toFirstLower»;
  			}
 '''
}
