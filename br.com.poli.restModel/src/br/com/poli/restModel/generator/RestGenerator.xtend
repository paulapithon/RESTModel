/*
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.generator

import br.com.poli.restModel.rest.Body
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import br.com.poli.restModel.rest.Elem
import br.com.poli.restModel.rest.Atrib
import java.util.HashMap
import java.security.InvalidParameterException
import java.util.Map.Entry
import java.util.Map
import br.com.poli.restModel.rest.GlobAtrib
import br.com.poli.restModel.rest.Values
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RestGenerator extends AbstractGenerator {
	
	Map<String, String> atrHash;

	String className
	Map<String, GlobAtrib> globals;
	ArrayList<String> globalsMethods;
	String keyAtr

	String keyName

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		globals = new HashMap<String, GlobAtrib>();
		globalsMethods = new ArrayList<String>();
		fsa.generateFile("br/com/poli/RestModelAutoGerated/RestException.java", gerateException());

		for (body : resource.allContents.toIterable.filter(Body)) {
			if (body.globAtrib !== null) {
				if (globals.put(body.globAtrib.atribName, body.globAtrib) !== null)
					throw new InvalidParameterException()

			} else if (body.elem !== null) {
				className = body.elem.className;
				atrHash = new HashMap<String, String>();
				if (body.elem.package !== null) {
					keyName = body.elem.package.replaceAll("\\.", "/") + '/' + body.elem.className + ".java";
					if (body.elem.keyatr.size > 0) {
						keyAtr = body.elem.keyatr.get(0).atribName;
					}

					if (globalsMethods.contains(keyName)) {
						throw new InvalidParameterException()
					}

					globalsMethods.add(keyName)

					fsa.generateFile(keyName, '''package «body.elem.package»
«body.elem.compile»
					''')
				} else {
					keyName = body.elem.className + ".java";

					if (globalsMethods.contains(keyName)) {
						throw new InvalidParameterException()
					}

					globalsMethods.add(keyName)

					fsa.generateFile(body.elem.className + ".java", body.elem.compile)
				}
			}
		}

		fsa.generateFile("br/com/poli/RestModelAutoGerated/RestGlobals.java", '''package br.com.poli.RestModelAutoGerated;

public class RestGlobals{
	«IF !exist
("HOST")»
	public static final String HOST = "http://localhost:5000/"
	«ENDIF»
«FOR Entry
<String, GlobAtrib>  element : globals.entrySet()»
	«element.value.compile»
«ENDFOR»

}''')
	}

	def CharSequence gerateException() '''package br.com.poli.RestModelAutoGerated;
			
public class RestException extends RuntimeException{
	
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
	public RestException(String msg) {
		super(msg);
	}
	
	public RestException(String msg,Throwable e) {
		super(msg,e);
	}
	
	public RestException(Throwable e) {
		super(e);
	}

}
'''

	def CharSequence compile(Elem elem) '''
		import br.com.poli.RestModelAutoGerated.RestGlobals;
		import br.com.poli.RestModelAutoGerated.RestException;
		
		import java.io.BufferedReader;
		import java.io.IOException;
		import java.io.InputStreamReader;
		import java.io.OutputStream;
				
		import java.net.HttpURLConnection;
		import java.net.MalformedURLException;
		import java.net.URL;
		
		public class «elem.className» {
		«FOR art : elem.keyatr»
			«art.compile»
		«ENDFOR»	
		«FOR art : elem.atrib»
			«art.compile»
		«ENDFOR»		
		
			«gerateConstructor»
			«gerateGetters»«gerateSetters»	
			«gerateGetRequest»
			«geratePostRequest»
			«geratePutRequest»
			«gerateDeleteRequest»
			«gerateRequest»
			«gerateURL»
			
			«gerateToServer»
		}
	'''

	def gerateURL() '''
		public String getURL() {
			return RestGlobals.HOST + "/ + «className»«IF !(keyAtr.isNullOrEmpty)» "+ "/" + this.«keyAtr.toFirstLower» + "«ENDIF»";
		}
	'''

	def gerateToServer() '''
	private String toServer(){
		String output = "{\n «FOR Entry<String, String>  art : atrHash.entrySet() SEPARATOR ", \\n\\t"» \"«art.key»\" :  \""+ «art.key.toFirstLower» + "\"«ENDFOR»\n}";
		return output;
	}'''

	def CharSequence gerateRequest() '''
		public String request(String requestType) throws IOException {
			String rValue = "";
			URL url = new URL(this.getURL());
			
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setRequestMethod(requestType);
			if(requestType.equals("POST") || requestType.equals("DELETE")  || requestType.equals("PUT")){
				conn.setRequestProperty("Content-Type", "application/json");
			}
			else{
				conn.setRequestProperty("Accept", "application/json");				
			}
			if(requestType.equals("POST") || requestType.equals("PUT")){
				String input = this.toServer();
				
				OutputStream os = conn.getOutputStream();
				os.write(input.getBytes());
				os.flush();
			}
			
			if (conn.getResponseCode() != 200) {
				throw new RestException("Failed : HTTP error code : " + conn.getResponseCode());
			}
			
			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
				
			String output;
			while ((output = br.readLine()) != null) {
					rValue += (output) + "\n";
			}
		
				conn.disconnect();
				
				return rValue;
		}
	'''

	def CharSequence geratePostRequest() '''
		public String post() {
			String rValue = "";
			try{
				rValue = this.request("POST");
			} catch ( IOException e) {
				throw new RestException(e);
			}
			return rValue;
		}
	'''

	def CharSequence geratePutRequest() '''
		public String put() {
			String rValue = "";
			try{
				rValue = this.request("PUT");
			} catch ( IOException e) {
				throw new RestException(e);
			}
			return rValue;
		}
	'''

	def CharSequence gerateDeleteRequest() '''
		public String delete() {
			String rValue = "";
			try{
				rValue = this.request("DELETE");
			} catch ( IOException e) {
				throw new RestException(e);
			}
			return rValue;
		}
	'''

	def CharSequence gerateGetRequest() '''
	public String get(String url) {
		String rValue = "";
		try {
			rValue = this.request("GET");	
		} catch (IOException e) {
			throw new RestException(e);
		}
		return rValue;
	}'''

	def CharSequence gerateConstructor() '''
		public «className» («FOR Entry<String, String>  art : atrHash.entrySet() SEPARATOR ','» «art.value» «art.key.toLowerCase»«ENDFOR»){
			«FOR Entry<String, String>  art : atrHash.entrySet()» 
				this.«art.key.toLowerCase» = «art.key.toLowerCase»;
			«ENDFOR»
		}
		
		public «className» (){
		}
		
	'''

	def CharSequence gerateGetters() '''
		«FOR Entry<String, String>  art : atrHash.entrySet()»
			public «art.value» get«art.key.toFirstUpper»(){
				return this.«art.key.toLowerCase»;
			}
			
			«ENDFOR»
			
	'''

	def CharSequence gerateSetters() '''
		«FOR Entry<String, String>  art : atrHash.entrySet()»
			public void set«art.key.toFirstUpper»(«art.value» «art.key.toLowerCase»){
				this.«art.key.toLowerCase» = «art.key.toLowerCase»;
			}
			
		«ENDFOR»
	'''

	def CharSequence compile(
		Atrib atr) '''	private «atr.tipo» «atr.atribName.toFirstLower»«IF (atr.value !== null)» = «atr.value.compileAndCheck(atr.tipo)» «ENDIF»;«if(atrHash.put(atr.atribName,atr.tipo) !== null)throw new InvalidParameterException()»'''

	def CharSequence compile(
		GlobAtrib atr) '''	public static final «atr.tipo» «atr.atribName.toUpperCase»  = «atr.value.compileAndCheck(atr.tipo)»;'''

	def CharSequence compileAndCheck(Values atr, String tipo) {
		if (!atr.idB.isNullOrEmpty && tipo.toLowerCase.equals("boolean")) {
			return atr.idB;
		} else if (!atr.idS.isNullOrEmpty && tipo.toLowerCase.equals("string")) {
			return "\"" + atr.idS + "\"";
		} else if (tipo.toLowerCase.equals("int") || tipo.toLowerCase.equals("long") ||
			tipo.toLowerCase.equals("short") || tipo.toLowerCase.equals("byte")) {
			return '''«atr.id»''';
		} else if (tipo.toLowerCase.equals("float") || tipo.toLowerCase.equals("double")) {
			return '''«atr.idF»''';
		} else if (tipo.toLowerCase.equals("char")) {
			return '''«atr.idC»''';
		} else if (atr.idT !== null) {
			return '''new «atr.idT»(«FOR par : atr.par SEPARATOR ','»«par»«ENDFOR»);''';
		} else {
			throw new InvalidParameterException()
		}
	}

	def boolean exist(String elem) {
		for (String  key : globals.keySet) {
			if (key.equals(elem))
				return true;
		}
		return false
	}
}
