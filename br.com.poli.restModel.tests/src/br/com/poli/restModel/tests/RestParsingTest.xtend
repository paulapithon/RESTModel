/*
 * generated by Xtext 2.15.0
 */
package br.com.poli.restModel.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import br.com.poli.restModel.rest.Model

@ExtendWith(InjectionExtension)
@InjectWith(RestInjectorProvider)
class RestParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Request{ 
				#Comentario
				Host : String 
				Entity{
					Atributo : Tipo
					
					Metodo() : Tipo
					MetodoImplementadoJava() : Tipo
				}
				Entity2{
					Atributo : String : "Olá"
					Atributo : int : 90
					
					Metodo() : Tipo	
					MetodoImplementadoJava() : Tipo
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
