/*
 * generated by Xtext 2.15.0
 */
package br.com.poli.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RESTModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.RESTModel.Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Start:
		//	"Request" '{' body=Body '}';
		@Override public ParserRule getRule() { return rule; }
		
		//"Request" '{' body=Body '}'
		public Group getGroup() { return cGroup; }
		
		//"Request"
		public Keyword getRequestKeyword_0() { return cRequestKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//body=Body
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_2_0() { return cBodyBodyParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.RESTModel.Body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBodyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cElemAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cElemElemParserRuleCall_0_1_0 = (RuleCall)cElemAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBodyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cGlobAtribAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGlobAtribAtribParserRuleCall_1_1_0 = (RuleCall)cGlobAtribAssignment_1_1.eContents().get(0);
		private final Action cBodyAction_2 = (Action)cAlternatives.eContents().get(2);
		
		//Body:
		//	{Body} elem=Elem | {Body} globAtrib=Atrib | {Body};
		@Override public ParserRule getRule() { return rule; }
		
		//{Body} elem=Elem | {Body} globAtrib=Atrib | {Body}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Body} elem=Elem
		public Group getGroup_0() { return cGroup_0; }
		
		//{Body}
		public Action getBodyAction_0_0() { return cBodyAction_0_0; }
		
		//elem=Elem
		public Assignment getElemAssignment_0_1() { return cElemAssignment_0_1; }
		
		//Elem
		public RuleCall getElemElemParserRuleCall_0_1_0() { return cElemElemParserRuleCall_0_1_0; }
		
		//{Body} globAtrib=Atrib
		public Group getGroup_1() { return cGroup_1; }
		
		//{Body}
		public Action getBodyAction_1_0() { return cBodyAction_1_0; }
		
		//globAtrib=Atrib
		public Assignment getGlobAtribAssignment_1_1() { return cGlobAtribAssignment_1_1; }
		
		//Atrib
		public RuleCall getGlobAtribAtribParserRuleCall_1_1_0() { return cGlobAtribAtribParserRuleCall_1_1_0; }
		
		//{Body}
		public Action getBodyAction_2() { return cBodyAction_2; }
	}
	public class ElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.RESTModel.Elem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassNameIDTerminalRuleCall_0_0 = (RuleCall)cClassNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldFieldParserRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Elem:
		//	ClassName=ID '{' field+=Field* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//ClassName=ID '{' field+=Field* '}'
		public Group getGroup() { return cGroup; }
		
		//ClassName=ID
		public Assignment getClassNameAssignment_0() { return cClassNameAssignment_0; }
		
		//ID
		public RuleCall getClassNameIDTerminalRuleCall_0_0() { return cClassNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//field+=Field*
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//Field
		public RuleCall getFieldFieldParserRuleCall_2_0() { return cFieldFieldParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.RESTModel.Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFieldAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAtribAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAtribAtribParserRuleCall_0_1_0 = (RuleCall)cAtribAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFieldAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMethAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMethMethodParserRuleCall_1_1_0 = (RuleCall)cMethAssignment_1_1.eContents().get(0);
		private final Action cFieldAction_2 = (Action)cAlternatives.eContents().get(2);
		
		//Field:
		//	{Field} atrib+=Atrib | {Field} meth+=Method | {Field};
		@Override public ParserRule getRule() { return rule; }
		
		//{Field} atrib+=Atrib | {Field} meth+=Method | {Field}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Field} atrib+=Atrib
		public Group getGroup_0() { return cGroup_0; }
		
		//{Field}
		public Action getFieldAction_0_0() { return cFieldAction_0_0; }
		
		//atrib+=Atrib
		public Assignment getAtribAssignment_0_1() { return cAtribAssignment_0_1; }
		
		//Atrib
		public RuleCall getAtribAtribParserRuleCall_0_1_0() { return cAtribAtribParserRuleCall_0_1_0; }
		
		//{Field} meth+=Method
		public Group getGroup_1() { return cGroup_1; }
		
		//{Field}
		public Action getFieldAction_1_0() { return cFieldAction_1_0; }
		
		//meth+=Method
		public Assignment getMethAssignment_1_1() { return cMethAssignment_1_1; }
		
		//Method
		public RuleCall getMethMethodParserRuleCall_1_1_0() { return cMethMethodParserRuleCall_1_1_0; }
		
		//{Field}
		public Action getFieldAction_2() { return cFieldAction_2; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.RESTModel.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtribNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtribNameIDTerminalRuleCall_0_0 = (RuleCall)cAtribNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoIDTerminalRuleCall_2_0 = (RuleCall)cTipoAssignment_2.eContents().get(0);
		private final Assignment cMbodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMbodyMethodBodyParserRuleCall_3_0 = (RuleCall)cMbodyAssignment_3.eContents().get(0);
		
		//Method:
		//	atribName=ID ":" Tipo=ID mbody=MethodBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//atribName=ID ":" Tipo=ID mbody=MethodBody?
		public Group getGroup() { return cGroup; }
		
		//atribName=ID
		public Assignment getAtribNameAssignment_0() { return cAtribNameAssignment_0; }
		
		//ID
		public RuleCall getAtribNameIDTerminalRuleCall_0_0() { return cAtribNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Tipo=ID
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//ID
		public RuleCall getTipoIDTerminalRuleCall_2_0() { return cTipoIDTerminalRuleCall_2_0; }
		
		//mbody=MethodBody?
		public Assignment getMbodyAssignment_3() { return cMbodyAssignment_3; }
		
		//MethodBody
		public RuleCall getMbodyMethodBodyParserRuleCall_3_0() { return cMbodyMethodBodyParserRuleCall_3_0; }
	}
	public class MethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.RESTModel.MethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyANY_OTHERTerminalRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodBody:
		//	{MethodBody} '{' body+=ANY_OTHER* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodBody} '{' body+=ANY_OTHER* '}'
		public Group getGroup() { return cGroup; }
		
		//{MethodBody}
		public Action getMethodBodyAction_0() { return cMethodBodyAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//body+=ANY_OTHER*
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ANY_OTHER
		public RuleCall getBodyANY_OTHERTerminalRuleCall_2_0() { return cBodyANY_OTHERTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AtribElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.RESTModel.Atrib");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtribNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtribNameIDTerminalRuleCall_0_0 = (RuleCall)cAtribNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoIDTerminalRuleCall_2_0 = (RuleCall)cTipoAssignment_2.eContents().get(0);
		
		//Atrib:
		//	atribName=ID ":" Tipo=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//atribName=ID ":" Tipo=ID
		public Group getGroup() { return cGroup; }
		
		//atribName=ID
		public Assignment getAtribNameAssignment_0() { return cAtribNameAssignment_0; }
		
		//ID
		public RuleCall getAtribNameIDTerminalRuleCall_0_0() { return cAtribNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Tipo=ID
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//ID
		public RuleCall getTipoIDTerminalRuleCall_2_0() { return cTipoIDTerminalRuleCall_2_0; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.com.poli.RESTModel.Comment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignNumberSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cNumberSignNumberSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cCarriageReturnKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		
		//Comment:
		//	'##' -> '##'
		//	| '#' -> ('\r' | '\n');
		@Override public ParserRule getRule() { return rule; }
		
		//'##' -> '##' | '#' -> ('\r' | '\n')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'##' -> '##'
		public Group getGroup_0() { return cGroup_0; }
		
		//'##'
		public Keyword getNumberSignNumberSignKeyword_0_0() { return cNumberSignNumberSignKeyword_0_0; }
		
		//-> '##'
		public Keyword getNumberSignNumberSignKeyword_0_1() { return cNumberSignNumberSignKeyword_0_1; }
		
		//'#' -> ('\r' | '\n')
		public Group getGroup_1() { return cGroup_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//-> ('\r' | '\n')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'\r' | '\n'
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'\r'
		public Keyword getCarriageReturnKeyword_1_1_0_0() { return cCarriageReturnKeyword_1_1_0_0; }
		
		//'\n'
		public Keyword getLineFeedKeyword_1_1_0_1() { return cLineFeedKeyword_1_1_0_1; }
	}
	
	
	private final StartElements pStart;
	private final BodyElements pBody;
	private final ElemElements pElem;
	private final FieldElements pField;
	private final MethodElements pMethod;
	private final MethodBodyElements pMethodBody;
	private final AtribElements pAtrib;
	private final CommentElements pComment;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RESTModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStart = new StartElements();
		this.pBody = new BodyElements();
		this.pElem = new ElemElements();
		this.pField = new FieldElements();
		this.pMethod = new MethodElements();
		this.pMethodBody = new MethodBodyElements();
		this.pAtrib = new AtribElements();
		this.pComment = new CommentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.com.poli.RESTModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start:
	//	"Request" '{' body=Body '}';
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//Body:
	//	{Body} elem=Elem | {Body} globAtrib=Atrib | {Body};
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//Elem:
	//	ClassName=ID '{' field+=Field* '}';
	public ElemElements getElemAccess() {
		return pElem;
	}
	
	public ParserRule getElemRule() {
		return getElemAccess().getRule();
	}
	
	//Field:
	//	{Field} atrib+=Atrib | {Field} meth+=Method | {Field};
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Method:
	//	atribName=ID ":" Tipo=ID mbody=MethodBody?;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//MethodBody:
	//	{MethodBody} '{' body+=ANY_OTHER* '}';
	public MethodBodyElements getMethodBodyAccess() {
		return pMethodBody;
	}
	
	public ParserRule getMethodBodyRule() {
		return getMethodBodyAccess().getRule();
	}
	
	//Atrib:
	//	atribName=ID ":" Tipo=ID;
	public AtribElements getAtribAccess() {
		return pAtrib;
	}
	
	public ParserRule getAtribRule() {
		return getAtribAccess().getRule();
	}
	
	//Comment:
	//	'##' -> '##'
	//	| '#' -> ('\r' | '\n');
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
