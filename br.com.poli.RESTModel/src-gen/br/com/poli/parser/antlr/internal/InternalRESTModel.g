/*
 * generated by Xtext 2.15.0
 */
grammar InternalRESTModel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package br.com.poli.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.com.poli.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.com.poli.services.RESTModelGrammarAccess;

}

@parser::members {

 	private RESTModelGrammarAccess grammarAccess;

    public InternalRESTModelParser(TokenStream input, RESTModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Start";
   	}

   	@Override
   	protected RESTModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStart
entryRuleStart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartRule()); }
	iv_ruleStart=ruleStart
	{ $current=$iv_ruleStart.current; }
	EOF;

// Rule Start
ruleStart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Request'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartAccess().getRequestKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAccess().getBodyBodyParserRuleCall_2_0());
				}
				lv_body_2_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"br.com.poli.RESTModel.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getStartAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	iv_ruleBody=ruleBody
	{ $current=$iv_ruleBody.current; }
	EOF;

// Rule Body
ruleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBodyAccess().getBodyAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBodyAccess().getElemElemParserRuleCall_0_1_0());
					}
					lv_elem_1_0=ruleElem
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						set(
							$current,
							"elem",
							lv_elem_1_0,
							"br.com.poli.RESTModel.Elem");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBodyAccess().getBodyAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBodyAccess().getGlobAtribAtribParserRuleCall_1_1_0());
					}
					lv_globAtrib_3_0=ruleAtrib
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						set(
							$current,
							"globAtrib",
							lv_globAtrib_3_0,
							"br.com.poli.RESTModel.Atrib");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBodyAccess().getBodyAction_2(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleElem
entryRuleElem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElemRule()); }
	iv_ruleElem=ruleElem
	{ $current=$iv_ruleElem.current; }
	EOF;

// Rule Elem
ruleElem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_ClassName_0_0=RULE_ID
				{
					newLeafNode(lv_ClassName_0_0, grammarAccess.getElemAccess().getClassNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElemRule());
					}
					setWithLastConsumed(
						$current,
						"ClassName",
						lv_ClassName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getElemAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElemAccess().getFieldFieldParserRuleCall_2_0());
				}
				lv_field_2_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElemRule());
					}
					add(
						$current,
						"field",
						lv_field_2_0,
						"br.com.poli.RESTModel.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getElemAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFieldAccess().getFieldAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getAtribAtribParserRuleCall_0_1_0());
					}
					lv_atrib_1_0=ruleAtrib
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						add(
							$current,
							"atrib",
							lv_atrib_1_0,
							"br.com.poli.RESTModel.Atrib");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFieldAccess().getFieldAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getMethMethodParserRuleCall_1_1_0());
					}
					lv_meth_3_0=ruleMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						add(
							$current,
							"meth",
							lv_meth_3_0,
							"br.com.poli.RESTModel.Method");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFieldAccess().getFieldAction_2(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_atribName_0_0=RULE_ID
				{
					newLeafNode(lv_atribName_0_0, grammarAccess.getMethodAccess().getAtribNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"atribName",
						lv_atribName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getColonKeyword_1());
		}
		(
			(
				lv_Tipo_2_0=RULE_ID
				{
					newLeafNode(lv_Tipo_2_0, grammarAccess.getMethodAccess().getTipoIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"Tipo",
						lv_Tipo_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getMbodyMethodBodyParserRuleCall_3_0());
				}
				lv_mbody_3_0=ruleMethodBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"mbody",
						lv_mbody_3_0,
						"br.com.poli.RESTModel.MethodBody");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMethodBody
entryRuleMethodBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodBodyRule()); }
	iv_ruleMethodBody=ruleMethodBody
	{ $current=$iv_ruleMethodBody.current; }
	EOF;

// Rule MethodBody
ruleMethodBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMethodBodyAccess().getMethodBodyAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodBodyAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				lv_body_2_0=RULE_ANY_OTHER
				{
					newLeafNode(lv_body_2_0, grammarAccess.getMethodBodyAccess().getBodyANY_OTHERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodBodyRule());
					}
					addWithLastConsumed(
						$current,
						"body",
						lv_body_2_0,
						"org.eclipse.xtext.common.Terminals.ANY_OTHER");
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getMethodBodyAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAtrib
entryRuleAtrib returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtribRule()); }
	iv_ruleAtrib=ruleAtrib
	{ $current=$iv_ruleAtrib.current; }
	EOF;

// Rule Atrib
ruleAtrib returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_atribName_0_0=RULE_ID
				{
					newLeafNode(lv_atribName_0_0, grammarAccess.getAtribAccess().getAtribNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtribRule());
					}
					setWithLastConsumed(
						$current,
						"atribName",
						lv_atribName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAtribAccess().getColonKeyword_1());
		}
		(
			(
				lv_Tipo_2_0=RULE_ID
				{
					newLeafNode(lv_Tipo_2_0, grammarAccess.getAtribAccess().getTipoIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtribRule());
					}
					setWithLastConsumed(
						$current,
						"Tipo",
						lv_Tipo_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
