/**
 * generated by Xtext 2.15.0
 */
package br.com.poli.rESTModel.impl;

import br.com.poli.rESTModel.Atrib;
import br.com.poli.rESTModel.Field;
import br.com.poli.rESTModel.Method;
import br.com.poli.rESTModel.RESTModelPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Field</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.com.poli.rESTModel.impl.FieldImpl#getAtrib <em>Atrib</em>}</li>
 *   <li>{@link br.com.poli.rESTModel.impl.FieldImpl#getMeth <em>Meth</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FieldImpl extends MinimalEObjectImpl.Container implements Field
{
  /**
   * The cached value of the '{@link #getAtrib() <em>Atrib</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtrib()
   * @generated
   * @ordered
   */
  protected EList<Atrib> atrib;

  /**
   * The cached value of the '{@link #getMeth() <em>Meth</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeth()
   * @generated
   * @ordered
   */
  protected EList<Method> meth;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FieldImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RESTModelPackage.Literals.FIELD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Atrib> getAtrib()
  {
    if (atrib == null)
    {
      atrib = new EObjectContainmentEList<Atrib>(Atrib.class, this, RESTModelPackage.FIELD__ATRIB);
    }
    return atrib;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Method> getMeth()
  {
    if (meth == null)
    {
      meth = new EObjectContainmentEList<Method>(Method.class, this, RESTModelPackage.FIELD__METH);
    }
    return meth;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RESTModelPackage.FIELD__ATRIB:
        return ((InternalEList<?>)getAtrib()).basicRemove(otherEnd, msgs);
      case RESTModelPackage.FIELD__METH:
        return ((InternalEList<?>)getMeth()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RESTModelPackage.FIELD__ATRIB:
        return getAtrib();
      case RESTModelPackage.FIELD__METH:
        return getMeth();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RESTModelPackage.FIELD__ATRIB:
        getAtrib().clear();
        getAtrib().addAll((Collection<? extends Atrib>)newValue);
        return;
      case RESTModelPackage.FIELD__METH:
        getMeth().clear();
        getMeth().addAll((Collection<? extends Method>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RESTModelPackage.FIELD__ATRIB:
        getAtrib().clear();
        return;
      case RESTModelPackage.FIELD__METH:
        getMeth().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RESTModelPackage.FIELD__ATRIB:
        return atrib != null && !atrib.isEmpty();
      case RESTModelPackage.FIELD__METH:
        return meth != null && !meth.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FieldImpl
